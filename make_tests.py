#!/bin/python3

# Generates ceylon tests for ceylon.markdown using the 
# tests contained within the commonmark spec 

import os
import os.path
import subprocess
import json

def cloneOrPull(url, tag):
    "git clone and/or pull the commonmark reference implementation"
    tmp='tmp'
    dir=os.path.join(tmp,'CommonMark')
    if os.path.exists(dir):
        os.chdir(dir)
        subprocess.call(['git','pull','--ff-only',url])
    else:
        os.mkdir(tmp)
        os.chdir(tmp)
        subprocess.call(['git','clone',url])
        os.chdir('CommonMark')
    subprocess.call(['git','checkout',tag])
    print('Using CommonMark version '+tag)

def dumpTests():
    "dump the test data from the references implementation"
    # execute 'python3 test/spec_tests.py --dump-tests '
    # in a subprocess capturing the output (which should be JSON)
    # parse the result and return it
    p = subprocess.Popen(['python3','test/spec_tests.py','--dump-tests'], stdout=subprocess.PIPE)
    out,err=p.communicate()
    return json.loads(str(out,'utf-8'))
    

def quote(s):
    return s.replace('\\','\\\\').replace('\n','\\n').replace('\r','\\r').replace('"','\\"').replace('`', '\\`')

def generateTests(data,tag,className,f):
    "Generate ceylon code from the JSON previously dumped"
    # the data is an array of objects with keys
    # start_line, end_line, example, section, markdown, html
    # we will generate one ceylon test function per object
    f.write('import ceylon.test{test,assertEquals}\n')
    f.write('import ceylon.markdown.core{parse}\n')
    f.write('import ceylon.markdown.html{renderPartialHtml}\n')
    f.write('import ceylon.html{renderTemplate,Node}\n')
    f.write('\n')
    f.write('/*\n')
    f.write("  The code in this file was generated by the make_tests.py script\n")
    f.write("  You might want to run it from time to time\n  to keep these tests up to date with the latest\n  commonmark spec tests\n")
    f.write('*/\n')
    f.write('shared class '+className+'() {\n')
    f.write('    String render(String md) {\n')
    f.write('        value sb = StringBuilder();\n')
    f.write('        value f = sb.append;\n')
    f.write('        for (node in renderPartialHtml(parse(md))) {\n')
    f.write('            assert(is Node node);\n')
    f.write('            renderTemplate(node, f);\n')
    f.write('        }\n')
    f.write('        return sb.string;\n');
    f.write('    }\n\n');
    for t in data:
        section = t['section'].replace(' ', '_')
        example = t['example']
        f.write('    """Test for example {ex} from the common mark spec (v{ver}).\n'.format(ex=example, ver=tag))
        f.write('       See http://spec.commonmark.org/{ver}/#example-{ex}"""\n'.format(ex=example, ver=tag))
        f.write('    test\n')
        f.write('    shared void specTest_{sect}_{ex}() {{\n'.format(sect=section,ex=example))
        f.write('        value md = "%s";\n'%quote(t['markdown']))
        f.write('        value html = "%s";\n'%quote(t['html']))
        f.write('        assertEquals{\n')
        f.write('            expected = html;\n')
        f.write('            actual = render(md);\n')
        f.write('        };\n')
        f.write('    }\n')
        f.write('\n')
    f.write('}\n')

def run():
    tag = '0.26'
    dir = os.getcwd()
    data = None
    try:
        cloneOrPull('git@github.com:jgm/CommonMark.git', tag)
        data = dumpTests()
    finally:
        os.chdir(dir)
    bysect = {}
    for d in data:
        sect = d['section']
        if sect in bysect:
            bysect[sect].append(d)
        else:
            bysect[sect] = [d]
    for sect,data in bysect.items():
        className = sect.replace(' ', '_')
        try:
            fd=open('source/test/ceylon/markdown/'+className+'_tests.ceylon', 'w')
            generateTests(data, tag, className, fd)
        finally:
            fd.close()
    

if __name__ == '__main__':
    run()


